{"version":3,"sources":["components/ChatInput.jsx","components/ChatMessage.jsx","components/Chat.jsx","App.js","serviceWorker.js","index.js"],"names":["ChatInput","state","message","_this2","this","react_default","a","createElement","onSubmit","e","preventDefault","props","onSubmitMessage","setState","type","placeholder","value","onChange","target","autoFocus","Component","ChatMessage","_ref","name","className","url","window","location","hostname","Chat","hg","messages","ws","WebSocket","addMessage","_this","concat","Object","toConsumableArray","document","getElementsByClassName","offsetHeight","scrollTo","submitMessage","messageString","send","JSON","stringify","onopen","console","log","onmessage","evt","parse","data","onclose","_this3","htmlFor","id","components_ChatInput","onKeyDown","pressedKey","slice","reverse","map","index","key","App","src_components_Chat","Boolean","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b63ef016.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ChatInput extends Component {\r\n  static propTypes = {\r\n    onSubmitMessage: PropTypes.func.isRequired,\r\n  }\r\n  state = {\r\n    message: '',\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit = { e => {\r\n          e.preventDefault()\r\n          this.props.onSubmitMessage(this.state.message)\r\n          this.setState({ message: '' })\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder={'Enter message...'}\r\n          value={this.state.message}\r\n          onChange={e => this.setState({ message: e.target.value })}\r\n          autoFocus\r\n        />\r\n        <input type=\"submit\" value={'—►'} />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ChatInput","import React from 'react'\r\n\r\nexport default ({ name, message }) =>\r\n  <tr>\r\n    <td className=\"name\">{name}</td>\r\n    <td className=\"msg\">{message}</td>\r\n  </tr>","import React, { Component } from 'react'\r\nimport ChatInput from './ChatInput'\r\nimport ChatMessage from './ChatMessage'\r\nimport './Chat.css';\r\n\r\nconst url = 'ws://' + window.location.hostname + ':3030';\r\n\r\n\r\nclass Chat extends Component {\r\n  state = {\r\n    hg : 0,\r\n    name: '',\r\n    messages: [],\r\n  }\r\n\r\n  ws = new WebSocket(url)\r\n\r\n  componentDidMount() {\r\n\r\n    this.ws.onopen = () => {\r\n      // on connecting, do nothing but log it to the console\r\n      console.log('connected')\r\n    }\r\n\r\n    this.ws.onmessage = evt => {\r\n      // on receiving a message, add it to the list of messages\r\n      const message = JSON.parse(evt.data)\r\n      this.addMessage(message)\r\n      // document.getElementById('root').appendChild(audio);\r\n    }\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('disconnected')\r\n      // automatically try to reconnect on connection loss\r\n      this.setState({\r\n        ws: new WebSocket(url),\r\n      })\r\n    }\r\n  }\r\n\r\n  addMessage = message =>{\r\n    this.setState(state => ({\r\n      messages: [message, ...state.messages],\r\n      hg : document.getElementsByClassName('msgs')[0].offsetHeight\r\n    }),\r\n    ()=> {\r\n      window.scrollTo(0,this.state.hg);\r\n    });\r\n  }\r\n  submitMessage = messageString => {\r\n    const message = { name: this.state.name, message: messageString }\r\n    this.ws.send(JSON.stringify(message))\r\n    this.addMessage(message)\r\n  }\r\n\r\n    render() {\r\n      return (\r\n      <div>\r\n        <div className=\"input\">\r\n          <label htmlFor=\"name\">\r\n            <input\r\n              type=\"text\"\r\n              id={'name'}\r\n              placeholder={'Your name here'}\r\n              value={this.state.name}\r\n              onChange={e => this.setState({ name: e.target.value })}\r\n              />\r\n          </label>\r\n          <ChatInput\r\n            ws={this.ws}\r\n            onSubmitMessage={messageString => this.submitMessage(messageString)}\r\n            onKeyDown={this.pressedKey}\r\n          />\r\n        </div>\r\n        <div className=\"wp\">\r\n          <table className=\"msgs\">\r\n            <tbody>\r\n              {this.state.messages.slice(0).reverse().map((message, index) =>\r\n                <ChatMessage\r\n                key={index}\r\n                message={message.message}\r\n                name={message.name}\r\n                />,\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Chat\r\n// var audio = document.createElement(\"audio\");\r\n// audio.setAttribute('ref','audio_tage');\r\n// audio.setAttribute('src','https://freesound.org/data/previews/131/131660_2398403-lq.mp3');\r\n// audio.setAttribute('controls',true);\r\n// audio.setAttribute('autoPlay',true);","import React from 'react';\nimport './App.css';\nimport Chat from './components/Chat'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}